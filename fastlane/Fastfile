# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane
default_platform(:ios)
skip_docs

# Project directory
project_directory = ENV["BITRISE_SOURCE_DIR"]
reports_directory = project_directory + "/reports/"
scheme = ENV["BITRISE_SCHEME"]
workspace = ENV["BITRISE_PROJECT_PATH"]
workspace_path = project_directory + "/" + workspace

desc "Runs all the Unit Tests"
lane :tests do
  # Publish Mac Notification
  notification(subtitle: "Lane Executing Test Cases", message: "Test Cases!")
# Check if reports folder exists
# This step is optional - if you want to keep all reports like test cases, coverage, docs etc under a specific folder.
            sh(" if [ ! -d #{project_directory} ] 
            then
                mkdir #{project_directory}
            fi ")
# Run tests
  run_tests(clean: true,
            fail_build: false,
            scheme: test_scheme,
            code_coverage: true,
            device: "iPhone 11",
            output_types: "html,junit",
            output_directory: "reports/")
end

desc "Does a static analysis of the project. Configure the options in .swiftlint.yml"
lane :lint do
  puts "Linting..."
  swiftlint(
    mode: :lint,
    executable: "Pods/SwiftLint/swiftlint",
    output_file: "reports/swiftlint.json",
    reporter: "json",
    config_file: ".swiftlint.yml",
    ignore_exit_status: true
  )

  file_path = reports_directory + "swiftlint.json"
  parsed_data = JSON.parse(File.read(file_path))
  # Group lint occurrences by type
  grouped_data = parsed_data.group_by { |lint| lint['severity'] }

  # Count the occurrences for each lint type
  occurrence_count = grouped_data.transform_values(&:count)

  # Print the occurrence count for each lint type
  occurrence_count.each do |type, count|
    puts "Lint Severity: #{type}"
    puts "Occurrences: #{count}"
    puts "---"
  end

end

desc "Runs all code coverage analysis and generate report"
lane :code_coverage do

  puts "Code Coverage..."
  coverage_files_to_ignore = [
    'R.generated.swift',
    'Pods/*',
  ]
  # Generate code coverage report
  code_cov_args = {
    scheme: ENV["APP_SCHEME"],
    proj: ENV["APP_PROJECT"],
    cobertura_xml: true,
    jenkins: true, 
    verbose: true,
    ignore: coverage_files_to_ignore,
    output_directory: "reports/"
  }
  if ENV["APP_WORKSPACE"]
    code_cov_args[:workspace] = ENV["APP_WORKSPACE"]
  end

  slather(code_cov_args)
end

desc "Runs all code coverage analysis and generate report"
lane :generate_coverage_report do

  sh(" if [ -d #{reports_directory} ] 
            then
              rm -rf #{reports_directory}
            fi ")
  # Build and run your tests to generate the coverage report
  scan(
    scheme: scheme, # Replace with your scheme name
    code_coverage: true,
  )

  # notification(subtitle: "Lane Executing Coverage Report", message: "Coverage in progress!")

  xcov(
    workspace: workspace_path,
    scheme: scheme,
    output_directory: "reports/",
    only_project_targets: true,
    json_report: true
  )

  file_path = reports_directory + "report.json"
  coverage_report = JSON.parse(File.read(file_path))

    # Extract relevant information from the coverage report
    summary = coverage_report["targets"].map do |target|
      target_name = target["name"]
      target_summary = target["coverage"]
      "#{target_name}: #{target_summary}%"
    end.join("\n")

  puts "Code coverage: #{summary}"

  coverage_summary = coverage_report["coverage"]
  notification(subtitle: "Coverage % :::::: ", message: "#{coverage_summary}")
  puts "Avg Coverage: #{coverage_summary}"
end

lane :generate_app_size do
  # Build the app
  sh("xcodebuild -workspace /Users/sumitkumar/Documents/GitHub/multiscanpipeline-jenkins-fastlane-ios/AdManagerTest.xcworkspace -scheme AdManagerTest clean build -destination 'generic/platform=iOS Simulator'")
  # Run xcodebuild and capture build settings in a variable
  build_settings=sh("xcodebuild -workspace /Users/sumitkumar/Documents/GitHub/multiscanpipeline-jenkins-fastlane-ios/AdManagerTest.xcworkspace -scheme AdManagerTest -showBuildSettings | grep 'BUILD_ROOT'")

  # Split the string by '=' and remove leading/trailing spaces
  # Use regex to find the BUILD_ROOT value
  # Split the output into lines and find the line containing BUILD_ROOT
  build_root_line = build_settings.lines.find { |line| line.include?("BUILD_ROOT") }
  puts "build_root_line : #{build_root_line}"

  build_root = build_root_line.split('=').last
    # Use strip to remove leading white space
  build_root_no_space = build_root.strip + "/Debug-iphonesimulator/AdManagerTest.app"

  # Use the `du` command to get the file size in megabytes
  app_size_in_mb = sh("du -sh -m '#{build_root_no_space}' | awk '{print $1}'").to_i

  puts "App size h : #{app_size_in_mb} MB"

  # Retrieve app size metrics
  #build_settings = sh("xcodebuild -showBuildSettings -workspace /Users/sumitkumar/Documents/GitHub/multiscanpipeline-jenkins-fastlane-ios/AdManagerTest.xcworkspace -scheme AdManagerTest")

 # puts "Path for .app : #{app_path}"
  #app_size_info = sh("du -sh #{app_path}")

  # Extract summary and print
  #summary = extract_summary(build_settings, app_size_info)
  #puts "App Size Metrics Summary:"
  #puts summary
end

lane :generate_app_size_metrics do
  # Build the app
  sh("xcodebuild -workspace #{workspace_path} -scheme #{scheme}  clean build -destination 'generic/platform=iOS Simulator'")
  # Run xcodebuild and capture build settings in a variable
  build_settings=sh("xcodebuild -workspace #{workspace_path}  -scheme #{scheme} -showBuildSettings | grep 'BUILD_ROOT'")
  
  # Split the string by '=' and remove leading/trailing spaces
  # Use regex to find the BUILD_ROOT value
  # Split the output into lines and find the line containing BUILD_ROOT
  build_root_line = build_settings.lines.find { |line| line.include?("BUILD_ROOT") }
  puts "build_root_line : #{build_root_line}"
  
  build_root = build_root_line.split('=').last
  # Use strip to remove leading white space
  build_root_no_space = build_root.strip + "/Debug-iphonesimulator/AdManagerTest.app"
  
  # Use the `du` command to get the file size in megabytes
  app_size_in_mb = sh("du -sh -m '#{build_root_no_space}' | awk '{print $1}'").to_i
  
  puts "App size h : #{app_size_in_mb} MB"

  # Retrieve app size metrics
  #build_settings = sh("xcodebuild -showBuildSettings -workspace /Users/sumitkumar/Documents/GitHub/multiscanpipeline-jenkins-fastlane-ios/AdManagerTest.xcworkspace -scheme AdManagerTest")

 # puts "Path for .app : #{app_path}"
  #app_size_info = sh("du -sh #{app_path}")

  # Extract summary and print
  #summary = extract_summary(build_settings, app_size_info)
  #puts "App Size Metrics Summary:"
  #puts summary
end

platform :ios do
  desc "This lane initiates the build process. Takes argument(options) as app_build_name"
    lane :build do |options|
      puts "build process started..."
  # Options passed by user
      puts options
  # Ensure that the git status is clean and no megre head or un-commited code exists
      ensure_git_status_clean
  # Increment build number
      updated_build_num = increment_build_number(xcodeproj: project)
  # Commit the version bump
      commit_version_bump(xcodeproj: project)
  # Compile bitcode is hardcoded here, if required can be made configurable by moving to global variables list
      compile_bitcode = false 
      puts "compile_bitcode: #{compile_bitcode}"
      
      args = {  scheme: scheme,
                clean: clean_build,
              export_method: export_method,
              configuration: build_config,  
              include_bitcode: false,
              export_options: ({
                compileBitcode: compile_bitcode,
                provisioningProfiles: {
                  bundle_identifier => provisioning_profile
                }
              }),
              codesigning_identity: codesign_certificate,
              output_directory: output_directory_path,
              output_name: options[:app_build_name],
           }
      if workspace
            args[:workspace] = workspace
          else
            args[:project] = project
          end
# Fastlane build action to trigger build with required args
build_app(args)
 
end

desc "This lane will upload build to the respective distribution opted for"
lane :upload do |options|
output_build_name = options[:app_build_name]
        
    #Release notes - If empty will show last git commits in the notes
    if release_notes.empty?
      # Fetch changelog from Git repo
      release_notes = changelog_from_git_commits(
                          commits_count: "10",
                          pretty: "- (%ae) %s",
                          date_format: "short",
                          match_lightweight_tag: false, 
                          merge_commit_filtering: "exclude_merges")
    end
    puts "APP DISTRIBUTION : #{distribution}"
# Publish to the channel
    publish(build_name: output_build_name, version_num: get_version_number(target: target, configuration: build_config))
# Select upload option as per user selection
    case distribution
    when 'testfairy' 
        # Push build on to TestFairy 
        testfairy(api_key: api_key,
                    ipa: output_directory_path + output_build_name + ".ipa",
                    symbols_file: output_directory_path + output_build_name + ".app.dSYM.zip",
                    comment: release_notes,
                    testers_groups: groups,
                    notify: "on")
when 'testflight'
        # Push build on to TestFlight
        upload_to_testflight(
                    username: CredentialsManager::AppfileConfig.try_fetch_value(:apple_id),
                    app_identifier: bundle_identifier,
                    ipa: lane_context[SharedValues::IPA_OUTPUT_PATH],
                  skip_submission: true,
                  skip_waiting_for_build_processing: true,
                    groups: groups,
                    changelog: release_notes)
when 'appcenter'
        desc "This lane will upload build on AppCenter"
        appcenter_upload(
                  api_token: api_key,
                  owner_name: "FastlaneSampleOwner",
                  app_name: app_name,
                  file: lane_context[SharedValues::IPA_OUTPUT_PATH],
                  dsym: lane_context[SharedValues::DSYM_OUTPUT_PATH],
                  release_notes: release_notes,
                  notify_testers: true
        )
when 'firebase'
        firebase_app_distribution(
                    app: api_key,
                    ipa_path: output_directory_path + output_build_name + ".ipa",
                    groups: groups,
                    release_notes: release_notes
        )
else
        # No channel opted for notifing build release
        puts "No distribution opted to upload app"
      end
end

desc "This lane will commit version bump and push changes to remote "
  lane :push_to_remote do
# Push the commit to remote branch
    # simple version. pushes "master" branch to "origin" remote
    push_to_git_remote(remote: "origin", 
                       local_branch: "HEAD",  
                       remote_branch: remote_branch, 
                       force: true, 
                       tags: true)
    end
  
end